<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB/f38ESEhIPFNTT0BLUVhUV1dXIAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAASlVaMCpLbbsmS3LfRmyI+1V5k/9DeqX/Jmie/2aexv9rmbj3ZmpyPAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABbfZSzNHis/z1/sf9mocv/WZfG/zlqkv8pZZb/ZZ7H/2yi
        yv9NYHOvS2N9gGFzglQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABZWVkUZ2dnIGBvc3xDgrD/K3Gm/2qky/9UlMH/V5bE/16b
        yP9em8f/YZ3I/0x9ov9qocj/bZ7B+2FyfEwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAS1FiLCVXgvMaVov/MGub/0N5ov8raJj/UI+9/06O
        vf9QkcD/VJTC/1eVw/9bmcb/XpzG/2Gdx/9nn8f/Xn6ThwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA9Y4OnHWWd/yJpof87frD/PoGx/0OF
        tf9Dhbb/Roi3/0uMu/9HiLj/Sou5/1mWwv9fm8b/XJnE/12Zw/9UXGNsWFhYNAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIuZoo+72uv/v+H1/4m3
        1v86fa7/O36w/z+Csv83e63/JGuh/ydtpP8qcKb/LXSn/1+aw/+EtNX/WZbC/02BqP9mmLv/ZG12OAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG+A
        jpNxqM3/aaHI/1eUvv83e6z/NXmr/xpim/8eZZ3/Imqg/yVsov8nbaT/LHGn/2OcxP9emsX/VpXB/1qX
        wv95kqGLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFlZ
        ZihBZYGARGZ9u0J3oP8+dJ3/TIu4/zJ2qf8jaZ//E1uV/xlimv8cZZz/H2ae/yFpn/8ja6D/Onqr/5vF
        3/9Qj73/YZKx4212hDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAASG6Kmyduo/8nbqP/dKrO/22lyv9spMr/V5S+/x5imP8RVpD/FF2W/xhhmf8aY5r/G2Sb/x5l
        nf8bYJf/ncfh/0+PvP9PdpTLW1tbHAAAAAAAAAAAAAAAAAAAAAAAAAAAampqGEVOXFhCTV9gQlxxbGJ5
        i49VfZqnPWSGv2CIor9aepLbLXOm/yxzpv+Judf/baXK/22lyv9tpcr/MHOm/xdbkv8SWZT/E1yV/xVe
        lv8XYJj/GWKa/xVZkP9KhrT/UI+8/0WHtv9OeZjvAAAAAAAAAAAAAAAAAAAAAEthdEQpXIf3HV6W/0F9
        rv9Yl8X/TYCm/xNXkf8sbqT/aJ/I/3Wqzv9uiZzvd565/6TN5f+Hudj/b6fL/22lyv84e6z/M3ep/ytw
        pf8ZYZn/E1yV/xNclf8TXJX/E0+H/zJzpf9DhbT/QIOy/0Z3mvMAAAAAAAAAAAAAAAAAAAAAY3WHZEeH
        t/8uc6j/ZZ/I/1WUwv9XlcT/QnWc/02Gsf9incf/b6XM/zpad+NPc5Lnf6C2/4+82f9vp8z/baXK/0aF
        s/8zd6n/OHyt/z+Csf8udKf/GGCY/xNak/8TRnz/K3Cl/zh8rf9XgZ7bY3aEbAAAAAAAAAAARU5fWDtL
        YYA+TmSTTnuc/yZto/9Jibf/WJfD/1SUwf9WlcP/WZfF/1yaxv9fncj/XI2w/26jyf9rosn/W4Wj/26m
        yv9tpcr/ZZ/F/y5xpP87fq7/QIOy/0CDsv88f6//GlqQ/xNNg/8uc6b/NHip/0VvjcN/f38IAAAAAEVV
        Z1QdXpL/GWGZ/ytwpP9Dg7P/N22X/0WFtf9Mjbv/TY69/1GRwP9UlMH/V5XD/1qYxP9dm8b/YJzH/2We
        x/9mj6z/baXK/22lyv9tpcr/VI+5/yhtof8scaX/KG6i/xtglv8TVoz/N3ip/2ehx/9Lirf/Pn2r/1Zb
        WzgAAAAAQGyPyytwpv8zdqr/P4Gy/z2AsP9Ag7P/Q4W1/0SGtv9Hibj/R4i5/0OFtf9Jibf/VpTA/2Kd
        xv9bmMP/XpvG/3qTpP9kjar/dqG9/3GozP9tpcr/W5a//zR0pf8mZ5n/K2ue/0qItf9spMn/caXH/3We
        uf91lanPv7+/BAAAAACbpa2fyeTz/8fl9v+nzeX/P4Gx/zp9r/89gLD/P4Ky/ypwpf8lbKL/KnCm/yxz
        pv8wdaj/YZvE/4272f9YlcL/Uoq0/1mVwP9jjqv/U5C7/22lyv9tpcr/baXK/26lyv9tpcr/baXK/22l
        yv9tl7P3WVlZKFVVVQwAAAAAAAAAAL+/vwR1hI+Ld6zQ/2ujyf9pocj/Nnqr/zl8rf8obqT/HGSc/yJq
        oP8lbKL/J22k/ypwpv8uc6j/ZJ3E/2Oex/9VlMH/WZbC/2KNq/9to8j/baXK/26ixf9vpsv/bqXK/2+l
        yf+FttT/grPT/3Giw/9iYmIsAAAAAAAAAABKVWQwPVpvYElgcqc9cpn/Nm6Z/02Jtf8ydqn/MXao/xVd
        l/8XYJn/HWWd/yBnn/8iaqD/JGyh/yVtov8zdqj/l8Le/1CPvv9bkrn/co6g/4uxyP+Aq8b/Rn2k/zp+
        rv9wp8z/cqHA/5Wpt8OQqrq/coeSYAAAAAAAAAAAAAAAAD5qissja6H/I2qh/3Gozf9vpsv/baXK/1mW
        wP8xdaj/EVaQ/xNblf8ZYpn/G2Ob/x1lnP8fZp7/IWif/xxhmf+lzeX/YJvE/06AoPd/f38IW1tbHHJ8
        gkyXrLazmKy4v5i0wr99lqSjf39/CAAAAAAAAAAAAAAAAAAAAAAAAAAASXaW3yxypv8rcqb/hLbV/22l
        yv9tpcr/baXK/02LuP8XW5L/EViS/xRdlv8YYZj/GmOa/xpjmv8cZJz/F12U/0OAsP9dmcP/RoW0/0x8
        nvNcYmgsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABniJyjYZvE/2Cb
        xP+ky+P/frHS/26my/9tpcr/UY+7/zJ2qf8pbqP/GmGZ/xNclf8TXJX/F2CY/xdgmP8UVY3/MW+h/0uL
        uP9BhLP/Q4W2/1FbZ1QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFlZ
        WRRha3JMcYKRl7DZ8P+byOP/davP/22lyv9emMH/L3Om/zd7rP88f7D/L3Sn/xlhmf8TXJX/E1yV/xNK
        gP8jaJ7/P4Gy/0iCrvtYgZ7bW1tbHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABNUFtcZZi8/2OdxP9xqMz/baXK/22lyv82eKr/N3us/z6Csf9Ag7L/P4Ky/y50
        p/8WWI//E0Z7/ydtov81ear/S3WU1wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAdYeRZGSUtv9Hh7X/Z57F/2+ny/9tpcr/baXK/1qTvP8vc6X/O3+v/z2A
        sP88f6//LXKm/xVZj/8YW5L/SYi2/zd6rP80daX/R2J4aAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCh49gx+Lx/4i52f+dxt//baXK/22lyv9tpcr/baXK/1OO
        uf8kaZ7/HmSa/xhelf8TVoz/Gl6U/1aSvf9tpcr/b6bL/1aSvP9hdIJcAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACotLq/rNLn/5/J4v+XwNr/eqK9/4m4
        1f9tpcr/baXK/2afxv9MibX/RoOx/06Lt/9ln8b/baXK/3Giwv9vh5zDd5Gjp7+/vwQAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH9/fwhZWVkoX19fQEBh
        e9Mkap//KnCk/2ujyf9tpcr/baXK/22lyv9tpcr/baXK/26lyv9tpcr/baLE/19na0AAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABZWVkUToCk/0SEsv9knMP/bqbL/22lyv9kmLv/bKTJ/22lyv9zp8j/lsTf/4672P93psP7Y293QAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACBjpN0nrjH63Kbtv+VtMf/cJiy/zFwnv9NjLj/baXK/3Keuv+QoKifiJ2pn2p3
        ezwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH9/fwiKmaGDnrG9q6a2wK+Trby7fpCdgwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>